// Copyright 2016 Proyectos y Sistemas de Mantenimiento SL (eProsima).
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

/*!
 * @file Header.cpp
 * This source file contains the definition of the described types in the IDL file.
 *
 * This file was generated by the tool gen.
 */

#ifdef _WIN32
// Remove linker warning LNK4221 on Visual Studio
namespace {
char dummy;
}  // namespace
#endif  // _WIN32

#include "Header.h"
#include <fastcdr/Cdr.h>

#include <fastcdr/exceptions/BadParamException.h>
using namespace eprosima::fastcdr::exception;

#include <utility>

#define sys_msg_Header_max_cdr_typesize 272ULL;
#define sys_msg_Time_max_cdr_typesize 8ULL;
#define sys_msg_Header_max_key_cdr_typesize 0ULL;
#define sys_msg_Time_max_key_cdr_typesize 0ULL;

sys::msg::Header::Header()
{
    // unsigned long m_seq
    m_seq = 0;
    // sys::msg::Time m_time_stamp

    // string m_frame_id
    m_frame_id = "";


}

sys::msg::Header::~Header()
{



}

sys::msg::Header::Header(
        const Header& x)
{
    m_seq = x.m_seq;
    m_time_stamp = x.m_time_stamp;
    m_frame_id = x.m_frame_id;
}

sys::msg::Header::Header(
        Header&& x) noexcept 
{
    m_seq = x.m_seq;
    m_time_stamp = std::move(x.m_time_stamp);
    m_frame_id = std::move(x.m_frame_id);
}

sys::msg::Header& sys::msg::Header::operator =(
        const Header& x)
{

    m_seq = x.m_seq;
    m_time_stamp = x.m_time_stamp;
    m_frame_id = x.m_frame_id;

    return *this;
}

sys::msg::Header& sys::msg::Header::operator =(
        Header&& x) noexcept
{

    m_seq = x.m_seq;
    m_time_stamp = std::move(x.m_time_stamp);
    m_frame_id = std::move(x.m_frame_id);

    return *this;
}

bool sys::msg::Header::operator ==(
        const Header& x) const
{

    return (m_seq == x.m_seq && m_time_stamp == x.m_time_stamp && m_frame_id == x.m_frame_id);
}

bool sys::msg::Header::operator !=(
        const Header& x) const
{
    return !(*this == x);
}

size_t sys::msg::Header::getMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sys_msg_Header_max_cdr_typesize;
}

size_t sys::msg::Header::getCdrSerializedSize(
        const sys::msg::Header& data,
        size_t current_alignment)
{
    (void)data;
    size_t initial_alignment = current_alignment;


    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4);


    current_alignment += sys::msg::Time::getCdrSerializedSize(data.time_stamp(), current_alignment);
    current_alignment += 4 + eprosima::fastcdr::Cdr::alignment(current_alignment, 4) + data.frame_id().size() + 1;


    return current_alignment - initial_alignment;
}

void sys::msg::Header::serialize(
        eprosima::fastcdr::Cdr& scdr) const
{

    scdr << m_seq;scdr << m_time_stamp;scdr << m_frame_id.c_str();
}

void sys::msg::Header::deserialize(
        eprosima::fastcdr::Cdr& dcdr)
{

    dcdr >> m_seq;
    dcdr >> m_time_stamp;
    dcdr >> m_frame_id;
}

/*!
 * @brief This function sets a value in member seq
 * @param _seq New value for member seq
 */
void sys::msg::Header::seq(
        uint32_t _seq)
{
    m_seq = _seq;
}

/*!
 * @brief This function returns the value of member seq
 * @return Value of member seq
 */
uint32_t sys::msg::Header::seq() const
{
    return m_seq;
}

/*!
 * @brief This function returns a reference to member seq
 * @return Reference to member seq
 */
uint32_t& sys::msg::Header::seq()
{
    return m_seq;
}

/*!
 * @brief This function copies the value in member time_stamp
 * @param _time_stamp New value to be copied in member time_stamp
 */
void sys::msg::Header::time_stamp(
        const sys::msg::Time& _time_stamp)
{
    m_time_stamp = _time_stamp;
}

/*!
 * @brief This function moves the value in member time_stamp
 * @param _time_stamp New value to be moved in member time_stamp
 */
void sys::msg::Header::time_stamp(
        sys::msg::Time&& _time_stamp)
{
    m_time_stamp = std::move(_time_stamp);
}

/*!
 * @brief This function returns a constant reference to member time_stamp
 * @return Constant reference to member time_stamp
 */
const sys::msg::Time& sys::msg::Header::time_stamp() const
{
    return m_time_stamp;
}

/*!
 * @brief This function returns a reference to member time_stamp
 * @return Reference to member time_stamp
 */
sys::msg::Time& sys::msg::Header::time_stamp()
{
    return m_time_stamp;
}
/*!
 * @brief This function copies the value in member frame_id
 * @param _frame_id New value to be copied in member frame_id
 */
void sys::msg::Header::frame_id(
        const std::string& _frame_id)
{
    m_frame_id = _frame_id;
}

/*!
 * @brief This function moves the value in member frame_id
 * @param _frame_id New value to be moved in member frame_id
 */
void sys::msg::Header::frame_id(
        std::string&& _frame_id)
{
    m_frame_id = std::move(_frame_id);
}

/*!
 * @brief This function returns a constant reference to member frame_id
 * @return Constant reference to member frame_id
 */
const std::string& sys::msg::Header::frame_id() const
{
    return m_frame_id;
}

/*!
 * @brief This function returns a reference to member frame_id
 * @return Reference to member frame_id
 */
std::string& sys::msg::Header::frame_id()
{
    return m_frame_id;
}


size_t sys::msg::Header::getKeyMaxCdrSerializedSize(
        size_t current_alignment)
{
    static_cast<void>(current_alignment);
    return sys_msg_Header_max_key_cdr_typesize;
}

bool sys::msg::Header::isKeyDefined()
{
    return false;
}

void sys::msg::Header::serializeKey(
        eprosima::fastcdr::Cdr& scdr) const
{
    (void) scdr;
}



